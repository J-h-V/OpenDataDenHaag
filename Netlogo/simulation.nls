to setup ;run by observer -> called from dashboard
  reset-model
  load-data
  initialize-neighborhoods
  initialize-neighborhoods-data
  import-citizens
  reset-ticks
end

to reset-model ;run by observer -> to setup
               ;instead of using clear-all, this method prevents the deletion of the GIS map, which is process intensive to load back in. 
  clear-turtles
  clear-globals
  clear-ticks
  clear-all-plots
  clear-output
  set y 2020
  set q 1 
end

to go ;run by observer -> called from dashboard
  if ticks >= 40 [ print "Ten years have passed, stopping the model.." stop ]
  introduce-new-migrants
  consider-moving
  ;other stuff
  time-tick
end

to time-tick
  if q mod 4 = 0 [ set y y + 1 set q 0 ]
  set q q + 1
  tick
end  

to consider-moving ;run by observer -> to go
  ask citizens[
    let move-chance item (position "percent" item 0 movementage-data) item ( age + 1 ) movementage-data
    if random-float 1 < 2.5 * move-chance [ move-houses ]
  ]
end

to move-neighbhorhoods-buy [nh] ;run by citizen -> to move-houses
  if nh = current-neighborhood [ stop ] ;if citizen tries to move to current neighborhood, we assume no move is necessary.
  ask current-neighborhood [set available_buy_houses available_buy_houses + 1]
  move-to nh
  set current-neighborhood nh
  ask current-neighborhood [set available_buy_houses available_buy_houses - 1]
  if [available_buy_houses] of current-neighborhood < 1 [ set available-neighborhoods-buy neighborhoods with [ available_buy_houses > 0 ] ] ;rerun the availability if a neighborhood has no more houses available.
  set move-counter move-counter + 1
end

to move-neighbhorhoods-social-rent [nh] ;run by citizen -> to move-houses
  if nh = current-neighborhood [ stop ] ;if citizen tries to move to current neighborhood, we assume no move is necessary.
  ask current-neighborhood [set available_social_rent_houses available_social_rent_houses + 1]
  move-to nh
  set current-neighborhood nh
  ask current-neighborhood [set available_social_rent_houses available_social_rent_houses - 1]
  if [available_social_rent_houses] of current-neighborhood < 1 [ set available-neighborhoods-social-rent neighborhoods with [ available_social_rent_houses > 0 ] ] ;rerun the availability if a neighborhood has no more houses available.
  set move-counter move-counter + 1
end

to move-neighbhorhoods-part-rent [nh] ;run by citizen -> to move-houses
  if nh = current-neighborhood [ stop ] ;if citizen tries to move to current neighborhood, we assume no move is necessary.
  ask current-neighborhood [set available_part_rent_houses available_part_rent_houses + 1]
  move-to nh
  set current-neighborhood nh
  ask current-neighborhood [set available_part_rent_houses available_part_rent_houses - 1]
  if [available_part_rent_houses] of current-neighborhood < 1 [ set available-neighborhoods-part-rent neighborhoods with [ available_part_rent_houses > 0 ] ] ;rerun the availability if a neighborhood has no more houses available.
  set move-counter move-counter + 1
end

to move-houses ;run by citizen -> to consider-moving
  if available-neighborhoods-buy = nobody and available-neighborhoods-social-rent = nobody and available-neighborhoods-part-rent = nobody [ error "no availbility!" stop]
  let affordable-buy-neighborhoods available-neighborhoods-buy with [avg_price <= [budget] of myself * 9.35]
  let affordable-part-rent-neighborhoods available-neighborhoods-part-rent with [avg_price * 0.9 <= [budget] of myself * 9.35] ;assume renting is more afforable
  let affordable-social-rent-neighborhoods available-neighborhoods-social-rent with [avg_price * 0.75 <= [budget] of myself * 9.35] ;assume social renting is even more afforable
  if social-class = "low" [ set affordable-buy-neighborhoods nobody ] ;This is ugly, I know. But it works to make sure social class looks at right housing type.
  if social-class = "upper" or social-class = "middle" [ set affordable-social-rent-neighborhoods nobody ]
  
  ifelse affordable-buy-neighborhoods = nobody and affordable-social-rent-neighborhoods = nobody and affordable-part-rent-neighborhoods = nobody [ show "I am too poor to move" stop]
  [
    if affordable-part-rent-neighborhoods != nobody [ ask affordable-part-rent-neighborhoods [ define-utility myself "part-rent" ] ]
    if affordable-social-rent-neighborhoods != nobody [ ask affordable-social-rent-neighborhoods [ define-utility myself "social-rent" ] ]
    if affordable-buy-neighborhoods != nobody [ ask affordable-buy-neighborhoods [ define-utility myself "buy" ] ]
    
    let best-social-rent-option max-one-of social-rent-links [ utility ]
    let best-part-rent-option max-one-of part-rent-links [ utility ]
    let best-buy-option max-one-of buy-links [ utility ]
    
    let winner max-one-of ( link-set best-social-rent-option best-part-rent-option best-buy-option ) [utility]
    if is-buy-link? winner [ move-neighbhorhoods-buy other-side best-buy-option ]
    if is-part-rent-link? winner [ move-neighbhorhoods-part-rent other-side best-part-rent-option ]
    if is-social-rent-link? winner [ move-neighbhorhoods-social-rent other-side best-social-rent-option ]
    if winner = nobody [ error "I didn't find a best location!" ] 
  ]
  ;Remove links between citizen and neighborhoods so the next citizen can start calculating.
  ask social-rent-links [die]
  ask part-rent-links [die]
  ask buy-links [die]
end
