;Here I will add all procedures that change over time.

to calculate-social-class ;run by citizen -> to import-citizens and to introduce-new-migrants
                          ;To consider: currently only calculate social class when a citizen is created, should this be something that is recalcuted over time?
  
  ifelse income = "low" [
    ifelse education = "low" [ set social-class "lower" ][ set social-class "working" ]
  ]
  [ ifelse income = "high" [
    ifelse education = "high" [ set social-class "upper" ][ ifelse lifephase = "young" [ set social-class "working" ] [ set social-class "middle" ] ]
    ]
    [ ifelse education = "low" [ set social-class "working" ][ ifelse lifephase = "young" [ set social-class "working" ] [ set social-class "middle" ] ] ]
  ]
  ;above if-loop is quite hard to read, for further clarification see decision tree in report.
end

to define-utility [c ownership] ;run by neighborhoods -> to move-houses
  ifelse ownership = "social-rent"
  ;here comes the social rent function
  [create-social-rent-link-with c [
    set color green  
    set utility calculate-utility
    ]
  ]
  [
    ifelse ownership = "part-rent"
    ;here comes the part rent function
    [create-part-rent-link-with c [
      set color yellow  
      set utility calculate-utility
      ]
    ]
    [
      ifelse ownership = "buy"
      ;here comes the buy function
      [create-buy-link-with c [
        set color red    
        set utility calculate-utility
        ]
      ]
      [ error "wrong ownership type!" ]
    ]
  ]
end

to-report retrieve-factors [variable class] ;run by neighborhoods
  report item (position class item 0 factor-data) item ((position variable factors) + 1) factor-data
end


to-report calculate-utility ;run by buy/rent-link -> to define-utility
  let u 0 ;initialize utility
  let agents both-ends ;get agents in the link
  let c nobody 
  let nh nobody
  ask agents with [breed = citizens] [ set c self ] ;assign the agents to local variable
  ask agents with [breed = neighborhoods] [ set nh self ]
  if not is-agent? c or not is-agent? nh [ error "There seems to be no agents in this link!" ]
  
  ;to minimize computation, seperate calculations based on class
  ;then, calculate factors and their respective significance
  if [social-class] of c = "lower"
  [
    let ethnicity-score (ifelse-value
      [ethnicity] of c = "dutch" [ [p-dutch] of nh ]
      [ethnicity] of c = "other_western" [ [p-other-western] of nh ]
      [ethnicity] of c = "antilles" [ [p-antilles] of nh ]
      [ethnicity] of c = "morocco" [ [p-morocco] of nh ]
      [ethnicity] of c = "indonesian" [ [p-indonesian] of nh ]
      [ethnicity] of c = "suriname" [ [p-suriname] of nh ]
      [ethnicity] of c = "turkey" [ [p-turkey] of nh ]
      [ethnicity] of c = "eastern_european" [ [p-eastern-eu] of nh ]
      [ethnicity] of c = "other_nonwestern" [ [p-other-nonwestern] of nh ]
      [ 0 ])
    let safety-score [crimes] of nh / [population] of nh
    let safety-grade retrieve-factors "safety" "lower"
    
    ;include ethnicity prevalence, safety (crime)
    report ethnicity-score - ( safety-score * safety-grade )
  ]
  
  if [social-class] of c = "working"
  [
    let ethnicity-score (ifelse-value
      [ethnicity] of c = "dutch" [ [p-dutch] of nh ]
      [ethnicity] of c = "other_western" [ [p-other-western] of nh ]
      [ethnicity] of c = "antilles" [ [p-antilles] of nh ]
      [ethnicity] of c = "morocco" [ [p-morocco] of nh ]
      [ethnicity] of c = "indonesian" [ [p-indonesian] of nh ]
      [ethnicity] of c = "suriname" [ [p-suriname] of nh ]
      [ethnicity] of c = "turkey" [ [p-turkey] of nh ]
      [ethnicity] of c = "eastern_european" [ [p-eastern-eu] of nh ]
      [ethnicity] of c = "other_nonwestern" [ [p-other-nonwestern] of nh ]
      [ 0 ])    
    let ethnicity-grade retrieve-factors "social cohesion" "working" 
    let safety-score [crimes] of nh / [population] of nh
    let safety-grade retrieve-factors "safety" "working"
    let health-score [a_health] of nh
    let health-grade retrieve-factors "health" "working"
    
    ;include ethnicity prevalence, safety (crime), health
    report ( ethnicity-score * ethnicity-grade ) - ( safety-score * safety-grade ) + ( health-score * health-grade )
  ]
  
  if [social-class] of c = "middle"
  [
    let social-class-score [p-sc-middle] of nh
    let social-class-grade retrieve-factors "social cohesion" "middle" 
    let safety-score [crimes] of nh / [population] of nh
    let safety-grade retrieve-factors "safety" "middle"
    let health-score [a_health] of nh
    let health-grade retrieve-factors "health" "middle"
    let household-score [avg_household_size] of nh / biggest-avg-household
    let household-grade retrieve-factors "household size" "middle"
    
    
    ;include social-class prevalence, safety (crimes), school and health proximity, average household size
    report ( social-class-score * social-class-grade ) - ( safety-score * safety-grade ) + ( health-score * health-grade ) - ( household-score * household-grade )
  ]
  
  if [social-class] of c = "upper"
  [
    let social-class-score [p-sc-upper] of nh
    let social-class-grade retrieve-factors "social cohesion" "upper" 
    let safety-score [crimes] of nh / [population] of nh
    let safety-grade retrieve-factors "safety" "upper"
    let health-score [a_health] of nh
    let health-grade retrieve-factors "health" "upper"
    let household-score [avg_household_size] of nh / biggest-avg-household
    let household-grade retrieve-factors "household size" "upper"
    let amenities-score [b_amenities] of nh
    let amenities-grade retrieve-factors "amenities" "upper"
    let horeca-score [b_horeca] of nh
    let horeca-grade retrieve-factors "nuisance horeca" "upper"
    
    ;include social-class prevalence, safety (crimes), school and health proximity, recreation and nature amenities.
    report ( social-class-score * social-class-grade ) - ( safety-score * safety-grade ) + ( health-score * health-grade ) - ( household-score * household-grade ) + ( amenities-score * amenities-grade ) - ( horeca-score * horeca-grade )
  ]
  ;TODO schools. Should this be a positive or negative factor??
  
  
  ;report an empty utility (0), if something goes wrong here.
  report u
  error "why did I get here?"
end 

to-report other-side [l] ;run by citizen -> to move-houses
  let nh nobody
  ask l [set nh other-end]
  if not is-agent? nh [ error "There is no turtle at the end of this link." ]
  report nh
end

to update-neighborhoods ;run by observer -> to time-tick
                        ;This procedure will update all statistics with regards to changes in the neighborhood every tick.
                        ;Most stuff here are exogenous changes that are modeled as external pushes.
  
  
  ;TODO change in amenities
  
  ;TODO citizen change from life/death
  ask neighborhoods with [population > 0] [ let p_change nat_change / population
    set population population + population * p_change
    set available_buy_houses available_buy_houses + available_buy_houses * p_change
    set available_part_rent_houses available_part_rent_houses + available_part_rent_houses * p_change
    set available_social_rent_houses available_social_rent_houses + available_social_rent_houses * p_change
  ]
  
  ;TODO safety changes?
  
end

to update-citizen-demographics ;run by observer -> to update-neighborhoods
  ask neighborhoods [
    set citizen-count count citizens with [ current-neighborhood = self ]
    if citizen-count > 0 [
      set p-sc-lower count citizens with [current-neighborhood = self and social-class = "lower" ] / citizen-count
      set p-sc-working count citizens with [current-neighborhood = self and social-class = "working" ] / citizen-count
      set p-sc-middle count citizens with [current-neighborhood = self and social-class = "middle" ] / citizen-count
      set p-sc-upper count citizens with [current-neighborhood = self and social-class = "upper" ] / citizen-count
      set p-dutch count citizens with [current-neighborhood = self and ethnicity = "dutch" ] / citizen-count
      set p-other-western count citizens with [current-neighborhood = self and ethnicity = "other_western" ] / citizen-count
      set p-antilles count citizens with [current-neighborhood = self and ethnicity = "antilles" ] / citizen-count
      set p-morocco count citizens with [current-neighborhood = self and ethnicity = "morocco" ] / citizen-count
      set p-suriname count citizens with [current-neighborhood = self and ethnicity = "indonesian" ] / citizen-count
      set p-turkey count citizens with [current-neighborhood = self and ethnicity = "suriname" ] / citizen-count
      set p-indonesian count citizens with [current-neighborhood = self and ethnicity = "turkey" ] / citizen-count
      set p-eastern-eu count citizens with [current-neighborhood = self and ethnicity = "eastern_european" ] / citizen-count
      set p-other-nonwestern count citizens with [current-neighborhood = self and ethnicity = "other_nonwestern" ] / citizen-count
    ]
  ]
end

to update-neighborhood-housing
  set available-neighborhoods-part-rent neighborhoods with [ available_part_rent_houses > 0 ]
  set available-neighborhoods-social-rent neighborhoods with [ available_social_rent_houses > 0 ]
  set available-neighborhoods-buy neighborhoods with [ available_buy_houses > 0 ]
end
