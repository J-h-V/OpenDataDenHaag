;Here I will add all procedures that change over time.

to calculate-social-class ;run by citizen -> to import-citizens and to introduce-new-migrants
                          ;To consider: currently only calculate social class when a citizen is created, should this be something that is recalcuted over time?
  
  ifelse income = "low" [
    ifelse education = "low" [ set social-class "lower" ][ set social-class "working" ]
  ]
  [ ifelse income = "high" [
    ifelse education = "high" [ set social-class "upper" ][ ifelse lifephase = "young" [ set social-class "working" ] [ set social-class "middle" ] ]
    ]
    [ ifelse education = "low" [ set social-class "working" ][ ifelse lifephase = "young" [ set social-class "working" ] [ set social-class "middle" ] ] ]
  ]
  ;above if-loop is quite hard to read, for further clarification see decision tree in report.
end

to introduce-new-migrants
  ;This procedure will create new migrants which enter the model every timestep.
end

to define-utility [c ownership] ;run by neighborhoods -> to move-houses
  if ownership = "social-rent"
  ;here comes the part rent function
  [create-social-rent-link-with c [
    set color green  
    set utility calculate-utility
    ]
  ]
  
  if ownership = "part-rent"
  ;here comes the part rent function
  [create-part-rent-link-with c [
    set color yellow  
    set utility calculate-utility
    ]
  ]
  
  if ownership = "buy"
  ;here comes the buy function
  [create-buy-link-with c [
    set color red    
    set utility calculate-utility
    ]
  ]
end

to-report calculate-utility ;run by buy/rent-link -> to define-utility
  let u 0 ;initialize utility
  let agents both-ends ;get agents in the link
  let c nobody 
  let nh nobody
  ask agents with [breed = citizens] [ set c self ] ;assign the agents to local variable
  ask agents with [breed = neighborhoods] [ set nh self ]
  if not is-agent? c or not is-agent? nh [ error "There seems to be no agents in this link!" ]
  
  if [social-class] of c = "lower"
  [
    let ethnicity-score count citizens with [current-neighborhood = nh and ethnicity = [ethnicity] of c] / count citizens with [ current-neighborhood = nh ]
    
    ;include ethnicity prevalence
    report ethnicity-score
  ]
  
  if [social-class] of c = "working"
  [
    let ethnicity-score count citizens with [current-neighborhood = nh and ethnicity = [ethnicity] of c] / count citizens with [ current-neighborhood = nh ]
    let public-transport-score [ovstations] of nh
    ;include ethnicity prevalence, public transport
    report ethnicity-score * public-transport-score
  ]
  
  if [social-class] of c = "middle"
  [
    let social-class-score count citizens with [current-neighborhood = nh and social-class = [social-class] of c] / count citizens with [ current-neighborhood = nh ]
    
    ;include social-class prevalence, school and health proximity, public transport
    report social-class-score ;* public-transport-score * school-score * health-score
  ]
  
  if [social-class] of c = "upper"
  [
    let social-class-score count citizens with [current-neighborhood = nh and social-class = [social-class] of c] / count citizens with [ current-neighborhood = nh ]
    
    ;include social-class prevalence, school and health proximity, public transport, recreation and nature amenities.
    report social-class-score ;* public-transport-score * school-score * health-score * recreation-score * nature-score
  ]
  
  ;report an empty utility (0), if something goes wrong here.
  report u
  error "why did I get here?"
end ;TODO normalize utility, think of weights of each element, add all factors.

to-report other-side [l] ;run by citizen -> to move-houses
  let nh nobody
  ask l [set nh other-end]
  if not is-agent? nh [ error "There is no turtle at the end of this link." ]
  report nh
end

to update-neighborhoods
  ;This procedure will update all statistics with regards to changes in the neighborhood every tick.
  ;Most stuff here are exogenous changes that are modeled as external pushes.
  
  ;TODO change in amenities
  
  ;TODO citizen change from life/death
  
  ;TODO safety changes?
  
end
