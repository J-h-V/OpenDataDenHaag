to load-data ;run by observer -> to setup
  set nhc []
  set shape-data gis:load-dataset "data/buurten_32632.shp"
  set housing-data csv:from-file "data/housing_data.csv"
  foreach but-first housing-data [x -> set nhc lput item 0 x nhc]
  set citizen-data csv:from-file "data/citizen_data.csv"
  set income-data csv:from-file "data/income_data.csv"
  set education-data csv:from-file "data/education_data.csv"
  set amenities-data csv:from-file "data/amenities_data.csv"
  set movementage-data csv:from-file "data/movementage.csv"
end

to-report retrieve-data [bc variable dataset] ;run by neighborhoods
  if population > 0 [
    if not is-number? position bc nhc [error sentence bc "is no valid bc!"]
    report item (position variable item 0 dataset) item ((position bc nhc) + 1) dataset
  ]
  ;Be aware, in the case that the neighborhood has no residents, it is not included in most datasets.
  ;Therefore, running this procedure for a neighborhood without residents will always return 0.
  if population < 1 [
    report 0]
end

to startup ;run by observer
  set shape-data gis:load-dataset "data/buurten_32632.shp"
  ; Note that setting the coordinate system here is optional, as
  ; long as all of your datasets use the same coordinate system.
  gis:load-coordinate-system "data/buurten_32632.prj"
  gis:set-drawing-color white
  gis:draw shape-data 2
  gis:apply-coverage shape-data "BUURTCODE" buurtcode
  gis:apply-coverage shape-data "BUURTNAAM" buurtname
  gis:set-drawing-color 4
  gis:fill shape-data 1
  ; Set the world envelope to the union of all of our dataset's envelopes
  gis:set-world-envelope (gis:envelope-union-of (gis:envelope-of shape-data))
end

to initialize-neighborhoods ;run by observer -> to setup
  foreach gis:feature-list-of shape-data [ vector-feature ->
    let centroid gis:location-of gis:centroid-of vector-feature
    ; centroid will be an empty list if it lies outside the bounds
    ; of the current NetLogo world, as defined by our current GIS
    ; coordinate transformation
    if not empty? centroid
    [ create-neighborhoods 1
      [ set xcor item 0 centroid
        set ycor item 1 centroid
        set buurtnumber gis:property-value vector-feature "BUURTCODE"
        set size 6
        set population gis:property-value vector-feature "c_total"
        set shape "house"
        set label gis:property-value vector-feature "BUURTNAAM"
      ]
    ]
  ]
end  

to initialize-neighborhoods-data ;run by observer -> to setup
  ask neighborhoods[
    ;housing-data
    set houses retrieve-data buurtnumber "houses" housing-data
    ifelse houses = 0 [set size 8 set color 8 set shape "x"] [set size exp ( 1 / 3000 * houses ) + 7 ]
    set avg_household_size retrieve-data buurtnumber "avg_household_size" housing-data
    set avg_price retrieve-data buurtnumber "avg_price" housing-data
    set p_free retrieve-data buurtnumber "p_free" housing-data
    set owned_properties retrieve-data buurtnumber "bought_houses" housing-data
    set rented_properties retrieve-data buurtnumber "rented_houses" housing-data
    set available_buy_houses floor ( (houses * owned_properties / 100 * p_free / 100) / aggregate-cluster-size )
    set available_rent_houses floor ( (houses * rented_properties / 100 * p_free / 100) / aggregate-cluster-size )
    ;citizen-data
    set men retrieve-data buurtnumber "men" citizen-data
    set women retrieve-data buurtnumber "women" citizen-data
    set a_young retrieve-data buurtnumber "a_young" citizen-data
    set a_middle retrieve-data buurtnumber "a_middle" citizen-data
    set a_old retrieve-data buurtnumber "a_old" citizen-data
    set c_western retrieve-data buurtnumber "c_western" citizen-data
    set c_antilles retrieve-data buurtnumber "c_antilles" citizen-data
    set c_morocco retrieve-data buurtnumber "c_morocco" citizen-data
    set c_suriname retrieve-data buurtnumber "c_suriname" citizen-data
    set c_turkey retrieve-data buurtnumber "c_turkey" citizen-data
    set c_nonwestern retrieve-data buurtnumber "c_nonwestern" citizen-data
    ;amenities-data
    set b_horeca retrieve-data buurtnumber "b_horeca" amenities-data
    set b_culture retrieve-data buurtnumber "b_culture" amenities-data
    set d_gp retrieve-data buurtnumber "d_gp" amenities-data
    set d_super retrieve-data buurtnumber "d_super" amenities-data
    set d_daycare retrieve-data buurtnumber "d_nursery" amenities-data
    ;education-data
    set e_low retrieve-data buurtnumber "e_low" education-data
    set e_middle retrieve-data buurtnumber "e_middle" education-data
    set e_high retrieve-data buurtnumber "e_high" education-data
    ;income-data
    set avg_income retrieve-data buurtnumber "income" income-data
    ;Fill missing data points using linear regression coefficient (b=9.35)
    if avg_price < 1 [ set avg_price avg_income * 9.35 / 1000 ]
    if avg_income < 1 [ set avg_income avg_price / 9.35 * 1000 ]
  ]
end


to import-citizens ;run by observer -> to setup
  ask neighborhoods with [population > 0] [
    let household-count floor houses / aggregate-cluster-size
    ;lifephase locals
    let pop_a ( a_young + a_middle + a_old )
    let p_young a_young / pop_a
    let p_middle ( a_middle / pop_a ) + p_young
    let p_old ( a_old / pop_a ) + p_middle
    ;ethnicity locals
    let pop_c ( c_western + c_antilles + c_morocco + c_suriname + c_turkey + c_nonwestern )
    let p_western c_western / pop_c
    let p_antilles ( c_antilles / pop_c ) + p_western
    let p_morocco ( c_morocco / pop_c ) + p_antilles
    let p_suriname ( c_suriname / pop_c ) + p_morocco
    let p_turkey ( c_turkey / pop_c ) + p_suriname
    let p_nonwestern ( c_nonwestern / pop_c ) + p_turkey    
    ;education locals
    let pop_e ( e_low + e_middle + e_high )
    let p_e_low e_low / pop_e
    let p_e_middle ( e_middle / pop_e ) + p_e_low
    let p_e_high ( e_high / pop_e ) + p_e_middle 
    ;creating the actual citizens within the neighborhood
    hatch-citizens household-count [
      set label ""
      set shape "person"
      set size 8
      set current-neighborhood myself
      set migrant? false
      ;lifephase
      let dice_lifephase random-float 1
      set lifephase (ifelse-value
        dice_lifephase <= p_young [ "young" ]
        dice_lifephase <= p_middle [ "middle" ]
        dice_lifephase <= p_old [ "old" ]
        [ "error" ])
      ;age
      set age (ifelse-value
        lifephase = "young" [ random 25 ]
        lifephase = "middle" [ random 40 + 25 ]
        lifephase = "old" [ random 35 + 65 ]
        [ 999 ])
      ;ethnicity
      let dice_ethnicity random-float 1
      set ethnicity (ifelse-value
        dice_ethnicity <= p_western [ "western" ]
        dice_ethnicity <= p_antilles [ "antilles" ]
        dice_ethnicity <= p_morocco [ "morocco" ]
        dice_ethnicity <= p_suriname [ "suriname" ]
        dice_ethnicity <= p_turkey [ "turkey" ]
        dice_ethnicity <= p_nonwestern [ "nonwestern" ]
        [ "error" ])
      ;education
      let dice_education random-float 1
      set education (ifelse-value
        dice_education <= p_e_low [ "low" ]
        dice_education <= p_e_middle [ "middle" ]
        dice_education <= p_e_high [ "high" ]
        [ "error" ])
      ;income/budget
      set budget round random-normal [avg_income] of myself 2
      set income (ifelse-value
        budget <= 25000 [ "low" ]
        budget <= 40000 [ "middle" ]
        budget <= 100000 [ "high" ]
        [ "error" ])
  ] ]
  ask citizens [
    calculate-social-class
  ]
end